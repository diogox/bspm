// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diogox/bspm/internal/bspwm (interfaces: Service)

// Package bspwm is a generated GoMock package.
package bspwm

import (
	bspc "github.com/diogox/bspc-go"
	bspwmdesktop "github.com/diogox/bspm/internal/bspwm/desktop"
	bspwmevent "github.com/diogox/bspm/internal/bspwm/event"
	bspwmnode "github.com/diogox/bspm/internal/bspwm/node"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Desktops mocks base method
func (m *MockService) Desktops() bspwmdesktop.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Desktops")
	ret0, _ := ret[0].(bspwmdesktop.Service)
	return ret0
}

// Desktops indicates an expected call of Desktops
func (mr *MockServiceMockRecorder) Desktops() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desktops", reflect.TypeOf((*MockService)(nil).Desktops))
}

// Events mocks base method
func (m *MockService) Events() bspwmevent.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(bspwmevent.Manager)
	return ret0
}

// Events indicates an expected call of Events
func (mr *MockServiceMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockService)(nil).Events))
}

// Nodes mocks base method
func (m *MockService) Nodes() bspwmnode.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(bspwmnode.Service)
	return ret0
}

// Nodes indicates an expected call of Nodes
func (mr *MockServiceMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockService)(nil).Nodes))
}

// State mocks base method
func (m *MockService) State() (bspc.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(bspc.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State
func (mr *MockServiceMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockService)(nil).State))
}
