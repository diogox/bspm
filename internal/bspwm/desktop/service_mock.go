// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diogox/bspm/internal/bspwm/desktop (interfaces: Service)

// Package bspwmdesktop is a generated GoMock package.
package bspwmdesktop

import (
	bspc "github.com/diogox/bspc-go"
	filter "github.com/diogox/bspm/internal/bspwm/filter"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockService) Get(arg0 filter.DesktopFilter) (bspc.Desktop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(bspc.Desktop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), arg0)
}

// SetLayout mocks base method
func (m *MockService) SetLayout(arg0 filter.DesktopFilter, arg1 bspc.LayoutType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLayout indicates an expected call of SetLayout
func (mr *MockServiceMockRecorder) SetLayout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayout", reflect.TypeOf((*MockService)(nil).SetLayout), arg0, arg1)
}
