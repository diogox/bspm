// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diogox/bspm/internal/bspwm/event (interfaces: Manager)

// Package bspwmevent is a generated GoMock package.
package bspwmevent

import (
	bspc_go "github.com/diogox/bspc-go"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// On mocks base method
func (m *MockManager) On(arg0 bspc_go.EventType, arg1 callbackFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "On", arg0, arg1)
}

// On indicates an expected call of On
func (mr *MockManagerMockRecorder) On(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockManager)(nil).On), arg0, arg1)
}

// Start mocks base method
func (m *MockManager) Start() (cancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(cancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}
