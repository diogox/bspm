// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diogox/bspm/internal/feature (interfaces: TransparentMonocle)

// Package feature is a generated GoMock package.
package feature

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransparentMonocle is a mock of TransparentMonocle interface
type MockTransparentMonocle struct {
	ctrl     *gomock.Controller
	recorder *MockTransparentMonocleMockRecorder
}

// MockTransparentMonocleMockRecorder is the mock recorder for MockTransparentMonocle
type MockTransparentMonocleMockRecorder struct {
	mock *MockTransparentMonocle
}

// NewMockTransparentMonocle creates a new mock instance
func NewMockTransparentMonocle(ctrl *gomock.Controller) *MockTransparentMonocle {
	mock := &MockTransparentMonocle{ctrl: ctrl}
	mock.recorder = &MockTransparentMonocleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransparentMonocle) EXPECT() *MockTransparentMonocleMockRecorder {
	return m.recorder
}

// FocusNextHiddenNode mocks base method
func (m *MockTransparentMonocle) FocusNextHiddenNode() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FocusNextHiddenNode")
	ret0, _ := ret[0].(error)
	return ret0
}

// FocusNextHiddenNode indicates an expected call of FocusNextHiddenNode
func (mr *MockTransparentMonocleMockRecorder) FocusNextHiddenNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusNextHiddenNode", reflect.TypeOf((*MockTransparentMonocle)(nil).FocusNextHiddenNode))
}

// FocusPreviousHiddenNode mocks base method
func (m *MockTransparentMonocle) FocusPreviousHiddenNode() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FocusPreviousHiddenNode")
	ret0, _ := ret[0].(error)
	return ret0
}

// FocusPreviousHiddenNode indicates an expected call of FocusPreviousHiddenNode
func (mr *MockTransparentMonocleMockRecorder) FocusPreviousHiddenNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusPreviousHiddenNode", reflect.TypeOf((*MockTransparentMonocle)(nil).FocusPreviousHiddenNode))
}

// ToggleCurrentDesktop mocks base method
func (m *MockTransparentMonocle) ToggleCurrentDesktop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleCurrentDesktop")
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleCurrentDesktop indicates an expected call of ToggleCurrentDesktop
func (mr *MockTransparentMonocleMockRecorder) ToggleCurrentDesktop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleCurrentDesktop", reflect.TypeOf((*MockTransparentMonocle)(nil).ToggleCurrentDesktop))
}
